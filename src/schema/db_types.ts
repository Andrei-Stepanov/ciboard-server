/*
 * This file is part of ciboard-server

 * Copyright (c) 2021 Andrei Stepanov <astepano@redhat.com>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import _ from 'lodash';
import pako from 'pako';
import axios from 'axios';
import * as graphql from 'graphql';
import GraphQLJSON, { GraphQLJSONObject } from 'graphql-type-json';
import { GreenWaiveDecisionType, greenwave } from './greenwaive_types';
import { GreenwaveProductsType, KnownTypes, known_types } from '../cfg';
import { GraphQLUnionType } from 'graphql';
import BigInt from 'graphql-bigint';

const debug = require('debug');
const log = debug('osci:db_types');

const {
  GraphQLID,
  GraphQLInt,
  GraphQLList,
  GraphQLString,
  GraphQLBoolean,
  GraphQLObjectType,
} = graphql;

const StateCiType = new GraphQLObjectType({
  name: 'StateCiType',
  fields: () => ({
    irc: { type: GraphQLString },
    url: { type: GraphQLString },
    name: { type: GraphQLString },
    team: { type: GraphQLString },
    email: { type: GraphQLString },
  }),
});

const StateContactType = new GraphQLObjectType({
  name: 'StateContactType',
  fields: () => ({
    irc: { type: GraphQLString },
    url: { type: GraphQLString },
    docs: { type: GraphQLString },
    name: { type: GraphQLString },
    team: { type: GraphQLString },
    email: { type: GraphQLString },
    version: { type: GraphQLString },
  }),
});

const StateOriginType = new GraphQLObjectType({
  name: 'StateOriginType',
  fields: () => ({
    reason: { type: GraphQLString },
    creator: { type: GraphQLString },
  }),
});

const StateSystemType = new GraphQLObjectType({
  name: 'StateSystemType',
  fields: () => ({
    os: { type: GraphQLString },
    label: { type: GraphQLString },
    provider: { type: GraphQLString },
    architecture: { type: GraphQLString },
  }),
});

const StatePipelineType = new GraphQLObjectType({
  name: 'StatePipelineType',
  fields: () => ({
    id: { type: GraphQLString },
    name: { type: GraphQLString },
    build: { type: GraphQLString },
    stage: { type: GraphQLString },
  }),
});

const StateRunAdditinalInfoType = new GraphQLObjectType({
  name: 'StateRunAdditinalInfoType',
  fields: () => ({
    module: { type: GraphQLString },
    actual_module: { type: GraphQLString },
    additional_info: { type: new GraphQLList(GraphQLString) },
  }),
});

const StateRunType = new GraphQLObjectType({
  name: 'StateRunType',
  fields: () => ({
    log: { type: GraphQLString },
    url: { type: GraphQLString },
    debug: { type: GraphQLString },
    rebuild: { type: GraphQLString },
    log_raw: { type: GraphQLString },
    log_stream: { type: GraphQLString },
    trigger_rebuild: { type: GraphQLString },
    additional_info: {
      type: new GraphQLList(StateRunAdditinalInfoType),
    },
  }),
});

/**
 * https://pagure.io/fedora-ci/messages/blob/master/f/schemas/error.yaml
 */
const StateErrorType = new GraphQLObjectType({
  name: 'StateErrorType',
  fields: () => ({
    reason: { type: GraphQLString },
    issue_url: { type: GraphQLString },
  }),
});

const StateTestType = new GraphQLObjectType({
  name: 'StateTestType',
  fields: () => ({
    type: { type: GraphQLString },
    docs: { type: GraphQLString },
    note: { type: GraphQLString },
    result: { type: GraphQLString },
    category: { type: GraphQLString },
    namespace: { type: GraphQLString },
  }),
});

const StateArtifactType = new GraphQLObjectType({
  name: 'StateArtifactType',
  fields: () => ({
    id: { type: GraphQLString },
    nvr: { type: GraphQLString },
    type: { type: GraphQLString },
    branch: { type: GraphQLString },
    issuer: { type: GraphQLString },
    source: { type: GraphQLString },
    scratch: { type: GraphQLString },
    component: { type: GraphQLString },
  }),
});

/**
 * Artifact state - this is any kind of message, plus fields added during store phase
 */
export interface ArtifactState {
  /**
   * Block present for any kind of messages.
   */
  kai_state: KaiState;
  broker_msg_body: any;
}

export interface KaiState {
  /**
   * thread_id is copied thread_id from message or generated by KAI.
   */
  thread_id: string;
  /**
   * message_id is copied from message.
   * Used by KAI to check if this message already present in DB.
   * Mongodb has index for this field.
   */
  msg_id: string;
  /**
   * Version of schema broker message complays to.
   */
  version: string;
  /**
   * stage can be: 'build', 'dispatch', 'test', 'promote', etc....
   * derived from topic
   * stage (in standard called as `event`) is always the second item from the end of the topic
   * Examples:
   *
   * * pull-request.test.error -> test
   * * brew-build.promote.error -> promote
   **/
  stage: string;
  /**
   * state is always the latest part of the message
   * Examples:
   *
   *  * brew-build.promote.error -> error
   *  * brew-build.test.complete -> complete
   */
  state: string;
  /**
   * Derived from: generated_at
   * Example: 1616361381
   */
  timestamp: number;
  /**
   * processed
   */
  processed?: boolean;
  /**
   * origin
   */
  origin: {
    /**
     * Converted from pipeline message
     */
    creator: string;
    /**
     * kai
     */
    reason: string;
  };
  /**
   * Create, if possible, test case name.
   * The same name will have resultsdb:
   * https://pagure.io/fedora-ci/messages/blob/master/f/mappings/results/brew-build.test.complete.yaml#_5
   *
   *    name: "${body.test.namespace}.${body.test.type}.${body.test.category}"
   *
   * https://pagure.io/fedora-ci/messages/blob/master/f/schemas/test-common.yaml#_52
   *
   */
  test_case_name?: string;
}

const StateType = new GraphQLObjectType({
  name: 'StateType',
  fields: () => ({
    kai_state: { type: KaiStateType },
    broker_msg_body: {
      type: GraphQLJSON,
      description: 'all existing xunit entries are removed',
      resolve(parentValue) {
        const { broker_msg_body } = parentValue;
        return _.omit(broker_msg_body, ['xunit', 'test.xunit']);
      },
    },
    /** XXX: move this to independent query. Create index in DB. */
    broker_msg_xunit: {
      type: GraphQLString,
      args: {
        msg_id: {
          type: new GraphQLList(GraphQLString),
          description: 'Show xunit only if its msg_id in this list.',
        },
      },
      resolve(parentValue: ArtifactState, args) {
        const { msg_id } = args;
        const { xunit: xunit_v1 = null, test: { xunit: xunit_v2 } = null } = {
          test: {},
          ...parentValue.broker_msg_body,
        };
        const xunit = _.compact([xunit_v1, xunit_v2])[0];
        if (_.isEmpty(xunit)) {
          return null;
        }
        if (
          !_.isEmpty(msg_id) &&
          !_.includes(msg_id, parentValue.kai_state.msg_id)
        ) {
          /**
           * msg_id in args doesn't match
           */
          return null;
        }
        if (xunit.startsWith('http')) {
          /**
           * promise
           */
          return loadXunitFromUrl(xunit);
        }
        return xunit;
      },
    },
  }),
});

const KaiStateType = new GraphQLObjectType({
  name: 'KaiStateType',
  fields: () => ({
    stage: {
      type: GraphQLString,
      description: 'Example: build, dispatch, test, promote',
    },
    state: {
      type: GraphQLString,
      description: 'Example: complete, running, error',
    },
    msg_id: { type: GraphQLString },
    origin: { type: StateOriginType },
    version: { type: GraphQLString },
    thread_id: { type: GraphQLString },
    timestamp: { type: BigInt as graphql.GraphQLOutputType },
    test_case_name: { type: GraphQLString },
  }),
});

const loadXunitFromUrl = async (url: string) => {
  const config = {
    withCredentials: true,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET',
      'Access-Control-Allow-Headers': 'Origin, Content-Type, X-Auth-Token',
    },
  };
  var response;
  try {
    response = await axios.get(url, config);
    const compressed = pako.deflate(Buffer.from(response.data, 'utf8'), {
      level: 1,
    });
    response = Buffer.from(compressed).toString('base64');
  } catch (responseError) {
    log('Cannot proccess %s. Error: %o', url, responseError);
    return;
  }
  return response;
};

const ArtifactCurrentStateType = new GraphQLObjectType({
  name: 'ArtifactCurrentStateType',
  fields: () => ({
    error: { type: new GraphQLList(StateType) },
    queued: { type: new GraphQLList(StateType) },
    waived: { type: new GraphQLList(StateType) },
    running: { type: new GraphQLList(StateType) },
    complete: { type: new GraphQLList(StateType) },
  }),
});

// const ArtifactStateStatusType = new GraphQLObjectType({
//     name: 'ArtifactStateStatusType',
//     fields: () => ({
//         size: { type: GraphQLInt },
//         info: { type: GraphQLInt },
//         failed: { type: GraphQLInt },
//         passed: { type: GraphQLInt },
//         unknown: { type: GraphQLInt },
//         not_applicable: { type: GraphQLInt },
//         needs_inspection: { type: GraphQLInt },
//     }),
// });

// const ArtifactCurrentStateLenghtsType = new GraphQLObjectType({
//     name: 'ArtifactCurrentStateLenghtsType',
//     fields: () => ({
//         error: { type: ArtifactStateStatusType },
//         queued: { type: ArtifactStateStatusType },
//         waived: { type: ArtifactStateStatusType },
//         running: { type: ArtifactStateStatusType },
//         complete: { type: ArtifactStateStatusType },
//     }),
// });

const nameFieldForType = (type: KnownTypes) => {
  const includes = _.includes(_.keys(known_types), type);
  if (!includes) {
    return 'unknown type';
  }
  return known_types[type];
};

const convertNsvcToNvr = (nsvc: string) => {
  const splited = nsvc.split(':');
  if (_.size(splited) !== 4) {
    console.error(`Encountered invalid NSVC ${nsvc}`);
    return null;
  }
  /**
   * Convert NSVC to Brew NVR
   */
  return `${splited[0]}-${splited[1].replace(/-/g, '_')}-${splited[2]}.${
    splited[3]
  }`;
};

class Payload {
  constructor(obj: any) {
    Object.assign(this, obj);
  }
}
class MBSBuild extends Payload {}
class RPMBuild extends Payload {}
class Compose extends Payload {}

export const ArtifactRPMBuildType = new GraphQLObjectType({
  name: 'ArtifactRPMBuildType',
  description: 'Defines artifact entry for RPM build.',
  fields: () => ({
    nvr: { type: GraphQLString },
    uid: { type: GraphQLString },
    branch: { type: GraphQLString },
    issuer: { type: GraphQLString },
    source: { type: GraphQLString },
    scratch: { type: GraphQLBoolean },
    component: { type: GraphQLString },
    comment_id: { type: GraphQLString },
    repository: { type: GraphQLString },
    commit_hash: { type: GraphQLString },
    dependencies: { type: GraphQLString },
    gate_tag_name: { type: GraphQLString },
  }),
  isTypeOf: (payload_value) => payload_value instanceof RPMBuild,
});

export const ArtifactComposeType = new GraphQLObjectType({
  name: 'ArtifactComposeType',
  description: 'Defines artifact entry for Compose.',
  fields: () => ({
    compose_type: { type: GraphQLString },
  }),
  isTypeOf: (payload_value) => payload_value instanceof Compose,
});

export const ArtifactMBSBuildType = new GraphQLObjectType({
  name: 'ArtifactMBSBuildType',
  description: 'Defines artifact entry for MBS build.',
  fields: () => ({
    uid: { type: GraphQLString },
    name: { type: GraphQLString },
    nsvc: { type: GraphQLString },
    stream: { type: GraphQLString },
    context: { type: GraphQLString },
    version: { type: GraphQLString },
  }),
  isTypeOf: (payload_value) => payload_value instanceof MBSBuild,
});

export const ArtifactPayloadType = new GraphQLUnionType({
  name: 'ArtifactPayloadType',
  types: [ArtifactRPMBuildType, ArtifactMBSBuildType, ArtifactComposeType],
});

export const ArtifactType = new GraphQLObjectType({
  name: 'ArtifactType',
  description: 'Defines artifact entry.',
  fields: () => ({
    _id: { type: GraphQLID },
    type: { type: GraphQLString },
    aid: { type: GraphQLString },
    payload: {
      type: ArtifactPayloadType,
      resolve(parentValue, args, context, info) {
        const { type } = parentValue;
        if (type === 'koji-build' || type == 'koji-build-cs') {
          return new RPMBuild(parentValue.rpm_build);
        }
      },
    },
    states: { type: new GraphQLList(StateType) },
    current_state: { type: ArtifactCurrentStateType },
  }),
});

export const ArtifactsType = new GraphQLObjectType({
  name: 'ArtifactsType',
  fields: () => ({
    artifacts: { type: new GraphQLList(ArtifactType) },
    has_next: { type: GraphQLBoolean },
  }),
});
